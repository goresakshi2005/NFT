Directory structure:
└── NFT/
    ├── README.md
    ├── hardhat.config.js
    ├── package.json
    ├── contracts/
    │   ├── CertificateNFT.sol
    │   └── CertificateVerifier.sol
    ├── public/
    │   └── verification.html
    ├── scripts/
    │   ├── deploy.js
    │   └── issueCertificate.js
    ├── test/
    │   └── CertificateNFT.test.js
    └── utils/
        ├── certificateGenerator.js
        ├── ipfs.js
        └── qrGenerator.js

================================================
FILE: README.md
================================================



================================================
FILE: hardhat.config.js
================================================
require("@nomicfoundation/hardhat-toolbox");
require("dotenv").config();

const SEPOLIA_URL = process.env.SEPOLIA_URL;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY;

module.exports = {
  solidity: "0.8.19",
  networks: {
    sepolia: {
      url: SEPOLIA_URL,
      accounts: [PRIVATE_KEY],
    },
  },
  etherscan: {
    apiKey: ETHERSCAN_API_KEY,
  },
};


================================================
FILE: package.json
================================================
{
  "name": "nft-project",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {},
  "license": "MIT",
  "devDependencies": {
    "@nomicfoundation/hardhat-network-helpers": "^1.0.13",
    "@nomicfoundation/hardhat-toolbox": "^6.0.0",
    "hardhat": "^2.25.0"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "@openzeppelin/contracts": "^5.3.0",
    "adm-zip": "^0.4.16",
    "agent-base": "^6.0.2",
    "aggregate-error": "^3.1.0",
    "ansi-align": "^3.0.1",
    "ansi-colors": "^4.1.3",
    "ansi-escapes": "^4.3.2",
    "ansi-regex": "^5.0.1",
    "ansi-styles": "^4.3.0",
    "anymatch": "^3.1.3",
    "argparse": "^2.0.1",
    "axios": "^1.10.0",
    "balanced-match": "^1.0.2",
    "binary-extensions": "^2.3.0",
    "bn.js": "^5.2.2",
    "boxen": "^5.1.2",
    "brace-expansion": "^2.0.2",
    "braces": "^3.0.3",
    "brorand": "^1.1.0",
    "browser-stdout": "^1.3.1",
    "buffer-from": "^1.1.2",
    "bytes": "^3.1.2",
    "camelcase": "^6.3.0",
    "chalk": "^4.1.2",
    "chokidar": "^4.0.3",
    "ci-info": "^2.0.0",
    "clean-stack": "^2.2.0",
    "cli-boxes": "^2.2.1",
    "cliui": "^7.0.4",
    "color-convert": "^2.0.1",
    "color-name": "^1.1.4",
    "command-exists": "^1.2.9",
    "commander": "^8.3.0",
    "cookie": "^0.4.2",
    "debug": "^4.4.1",
    "decamelize": "^4.0.0",
    "depd": "^2.0.0",
    "diff": "^5.2.0",
    "dotenv": "^17.1.0",
    "elliptic": "^6.6.1",
    "emoji-regex": "^8.0.0",
    "enquirer": "^2.4.1",
    "env-paths": "^2.2.1",
    "escalade": "^3.2.0",
    "escape-string-regexp": "^4.0.0",
    "ethereum-cryptography": "^1.2.0",
    "fdir": "^6.4.6",
    "fill-range": "^7.1.1",
    "find-up": "^5.0.0",
    "flat": "^5.0.2",
    "follow-redirects": "^1.15.9",
    "form-data": "^4.0.3",
    "fp-ts": "^1.19.3",
    "fs-extra": "^7.0.1",
    "fs.realpath": "^1.0.0",
    "get-caller-file": "^2.0.5",
    "glob": "^8.1.0",
    "glob-parent": "^5.1.2",
    "graceful-fs": "^4.2.11",
    "has-flag": "^4.0.0",
    "hash.js": "^1.1.7",
    "he": "^1.2.0",
    "hmac-drbg": "^1.0.1",
    "http-errors": "^2.0.0",
    "https-proxy-agent": "^5.0.1",
    "iconv-lite": "^0.4.24",
    "immutable": "^4.3.7",
    "indent-string": "^4.0.0",
    "inflight": "^1.0.6",
    "inherits": "^2.0.4",
    "io-ts": "^1.10.4",
    "is-binary-path": "^2.1.0",
    "is-extglob": "^2.1.1",
    "is-fullwidth-code-point": "^3.0.0",
    "is-glob": "^4.0.3",
    "is-number": "^7.0.0",
    "is-plain-obj": "^2.1.0",
    "is-unicode-supported": "^0.1.0",
    "js-sha3": "^0.8.0",
    "js-yaml": "^4.1.0",
    "json-stream-stringify": "^3.1.6",
    "jsonfile": "^4.0.0",
    "keccak": "^3.0.4",
    "locate-path": "^6.0.0",
    "lodash": "^4.17.21",
    "log-symbols": "^4.1.0",
    "lru_map": "^0.3.3",
    "memorystream": "^0.3.1",
    "micro-eth-signer": "^0.14.0",
    "micro-packed": "^0.7.3",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1",
    "minimatch": "^5.1.6",
    "mnemonist": "^0.38.5",
    "ms": "^2.1.3",
    "node-addon-api": "^2.0.2",
    "node-gyp-build": "^4.8.4",
    "normalize-path": "^3.0.0",
    "obliterator": "^2.0.5",
    "once": "^1.4.0",
    "os-tmpdir": "^1.0.2",
    "p-limit": "^3.1.0",
    "p-locate": "^5.0.0",
    "p-map": "^4.0.0",
    "path-exists": "^4.0.0",
    "path-parse": "^1.0.7",
    "pdfkit": "^0.17.1",
    "picocolors": "^1.1.1",
    "picomatch": "^4.0.2",
    "qrcode": "^1.5.4",
    "randombytes": "^2.1.0",
    "raw-body": "^2.5.2",
    "readable-stream": "^3.6.2",
    "readdirp": "^4.1.2",
    "require-directory": "^2.1.1",
    "resolve": "^1.17.0",
    "safe-buffer": "^5.2.1",
    "safer-buffer": "^2.1.2",
    "semver": "^6.3.1",
    "serialize-javascript": "^6.0.2",
    "setprototypeof": "^1.2.0",
    "solc": "^0.8.26",
    "source-map": "^0.6.1",
    "source-map-support": "^0.5.21",
    "stacktrace-parser": "^0.1.11",
    "statuses": "^2.0.1",
    "string_decoder": "^1.3.0",
    "string-width": "^4.2.3",
    "strip-ansi": "^6.0.1",
    "strip-json-comments": "^3.1.1",
    "supports-color": "^7.2.0",
    "tinyglobby": "^0.2.14",
    "tmp": "^0.0.33",
    "to-regex-range": "^5.0.1",
    "toidentifier": "^1.0.1",
    "tslib": "^1.14.1",
    "tsort": "^0.0.1",
    "type-fest": "^0.21.3",
    "undici": "^5.29.0",
    "undici-types": "^7.8.0",
    "universalify": "^0.1.2",
    "unpipe": "^1.0.0",
    "util-deprecate": "^1.0.2",
    "uuid": "^8.3.2",
    "widest-line": "^3.1.0",
    "workerpool": "^6.5.1",
    "wrap-ansi": "^7.0.0",
    "wrappy": "^1.0.2",
    "ws": "^7.5.10",
    "y18n": "^5.0.8",
    "yargs": "^16.2.0",
    "yargs-parser": "^20.2.9",
    "yargs-unparser": "^2.0.0",
    "yocto-queue": "^0.1.0"
  },
  "keywords": [],
  "author": "",
  "description": ""
}



================================================
FILE: contracts/CertificateNFT.sol
================================================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";


contract CertificateNFT is ERC721, Ownable {
    using Counters for Counters.Counter;
    Counters.Counter private _tokenIdCounter;

    struct Certificate {
        string studentName;
        string courseName;
        uint256 issueDate;
        string ipfsHash;
    }

    mapping(uint256 => Certificate) public certificates;

    event CertificateIssued(
        uint256 indexed tokenId,
        string studentName,
        string courseName,
        uint256 issueDate,
        string ipfsHash
    );

    constructor() ERC721("AI Tutoring Certificate", "AITC") {}

    function issueCertificate(
        address recipient,
        string memory studentName,
        string memory courseName,
        string memory ipfsHash
    ) public onlyOwner returns (uint256) {
        _tokenIdCounter.increment();
        uint256 tokenId = _tokenIdCounter.current();

        _safeMint(recipient, tokenId);

        certificates[tokenId] = Certificate({
            studentName: studentName,
            courseName: courseName,
            issueDate: block.timestamp,
            ipfsHash: ipfsHash
        });

        emit CertificateIssued(
            tokenId,
            studentName,
            courseName,
            block.timestamp,
            ipfsHash
        );

        return tokenId;
    }

    function getCertificate(uint256 tokenId) public view returns (
        string memory studentName,
        string memory courseName,
        uint256 issueDate,
        string memory ipfsHash
    ) {
        require(_exists(tokenId), "Certificate does not exist");
        Certificate memory cert = certificates[tokenId];
        return (cert.studentName, cert.courseName, cert.issueDate, cert.ipfsHash);
    }
}


================================================
FILE: contracts/CertificateVerifier.sol
================================================
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./CertificateNFT.sol";

contract CertificateVerifier {
    CertificateNFT public certificateNFT;

    constructor(address _certificateNFTAddress) {
        certificateNFT = CertificateNFT(_certificateNFTAddress);
    }

    function verifyCertificate(
        uint256 tokenId,
        string memory studentName,
        string memory courseName,
        uint256 issueDate
    ) public view returns (bool) {
        try certificateNFT.getCertificate(tokenId) returns (
            string memory _studentName,
            string memory _courseName,
            uint256 _issueDate,
            string memory
        ) {
            return (
                keccak256(abi.encodePacked(_studentName)) == keccak256(abi.encodePacked(studentName)) &&
                keccak256(abi.encodePacked(_courseName)) == keccak256(abi.encodePacked(courseName)) &&
                _issueDate == issueDate
            );
        } catch {
            return false;
        }
    }
}


================================================
FILE: public/verification.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Certificate Verification</title>
  <script src="https://cdn.jsdelivr.net/npm/web3@1.5.2/dist/web3.min.js"></script>
</head>
<body>
  <div id="verification-container">
    <h1>Certificate Verification</h1>
    <div id="certificate-info"></div>
    <div id="verification-result"></div>
  </div>

  <script>
    const contractAddress = "YOUR_CONTRACT_ADDRESS";
    const contractABI = [/* Your ABI here */];
    
    async function verifyCertificate() {
      const urlParams = new URLSearchParams(window.location.search);
      const tokenId = urlParams.get('tokenId');
      
      if (!tokenId) {
        document.getElementById('verification-result').innerHTML = 
          '<p style="color: red;">No certificate ID provided</p>';
        return;
      }
      
      try {
        const web3 = new Web3(Web3.givenProvider || "https://sepolia.infura.io/v3/YOUR_INFURA_KEY");
        const contract = new web3.eth.Contract(contractABI, contractAddress);
        
        const certificate = await contract.methods.getCertificate(tokenId).call();
        
        document.getElementById('certificate-info').innerHTML = `
          <h2>Certificate Details</h2>
          <p><strong>Student Name:</strong> ${certificate.studentName}</p>
          <p><strong>Course Name:</strong> ${certificate.courseName}</p>
          <p><strong>Issue Date:</strong> ${new Date(certificate.issueDate * 1000).toLocaleDateString()}</p>
        `;
        
        document.getElementById('verification-result').innerHTML = 
          '<p style="color: green;">âœ“ This certificate is valid and verified on the blockchain</p>';
      } catch (error) {
        document.getElementById('verification-result').innerHTML = 
          '<p style="color: red;">âœ— This certificate could not be verified</p>';
      }
    }
    
    window.onload = verifyCertificate;
  </script>
</body>
</html>


================================================
FILE: scripts/deploy.js
================================================
const { ethers } = require("hardhat");

async function main() {
  const CertificateNFT = await ethers.getContractFactory("CertificateNFT");
  const certificateNFT = await CertificateNFT.deploy();
  
  await certificateNFT.deployed();
  
  console.log("CertificateNFT deployed to:", certificateNFT.address);

  const CertificateVerifier = await ethers.getContractFactory("CertificateVerifier");
  const certificateVerifier = await CertificateVerifier.deploy(certificateNFT.address);
  
  await certificateVerifier.deployed();
  
  console.log("CertificateVerifier deployed to:", certificateVerifier.address);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });


================================================
FILE: scripts/issueCertificate.js
================================================
const { ethers } = require("hardhat");
const { generateCertificate } = require("../utils/certificateGenerator");
const { uploadToIPFS } = require("../utils/ipfs");
const { generateQRCode } = require("../utils/qrGenerator");

async function main() {
  const [owner] = await ethers.getSigners();
  const certificateNFT = await ethers.getContract("CertificateNFT");

  // Certificate data
  const studentName = "John Doe";
  const courseName = "Advanced AI Tutoring";
  
  // Generate certificate PDF
  const certificatePDF = await generateCertificate(studentName, courseName);
  
  // Upload to IPFS
  const ipfsHash = await uploadToIPFS(certificatePDF);
  
  // Generate QR code with verification URL
  const qrCode = await generateQRCode(`https://yourwebsite.com/verify/${ipfsHash}`);
  
  // Issue certificate NFT
  const tx = await certificateNFT.issueCertificate(
    owner.address,
    studentName,
    courseName,
    ipfsHash
  );
  
  await tx.wait();
  
  console.log(`Certificate issued to ${studentName} for ${courseName}`);
  console.log(`IPFS Hash: ${ipfsHash}`);
  console.log(`QR Code generated: ${qrCode}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });


================================================
FILE: test/CertificateNFT.test.js
================================================
const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("CertificateNFT", function () {
  let CertificateNFT;
  let certificateNFT;
  let owner;
  let addr1;

  beforeEach(async function () {
    [owner, addr1] = await ethers.getSigners();
    CertificateNFT = await ethers.getContractFactory("CertificateNFT");
    certificateNFT = await CertificateNFT.deploy();
    await certificateNFT.deployed();
  });

  it("Should issue a certificate", async function () {
    const studentName = "John Doe";
    const courseName = "Advanced AI";
    const ipfsHash = "QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco";
    
    await expect(certificateNFT.issueCertificate(
      addr1.address,
      studentName,
      courseName,
      ipfsHash
    )).to.emit(certificateNFT, "CertificateIssued");
    
    const [name, course, date, hash] = await certificateNFT.getCertificate(1);
    expect(name).to.equal(studentName);
    expect(course).to.equal(courseName);
    expect(hash).to.equal(ipfsHash);
  });

  it("Should not allow non-owner to issue certificates", async function () {
    await expect(
      certificateNFT.connect(addr1).issueCertificate(
        addr1.address,
        "John Doe",
        "Advanced AI",
        "QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco"
      )
    ).to.be.revertedWith("Ownable: caller is not the owner");
  });
});


================================================
FILE: utils/certificateGenerator.js
================================================
const PDFDocument = require("pdfkit");
const fs = require("fs");

async function generateCertificate(studentName, courseName) {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ size: "A4", layout: "landscape" });
    
    // Certificate design
    doc.image("./assets/certificate-bg.jpg", 0, 0, { width: 842, height: 595 });
    
    doc.fontSize(40).text("Certificate of Completion", { align: "center" });
    doc.moveDown();
    doc.fontSize(25).text(`This is to certify that`, { align: "center" });
    doc.moveDown();
    doc.fontSize(40).text(studentName, { align: "center" });
    doc.moveDown();
    doc.fontSize(25).text(`has successfully completed the course`, { align: "center" });
    doc.moveDown();
    doc.fontSize(30).text(courseName, { align: "center" });
    doc.moveDown();
    doc.fontSize(20).text(`Issued on: ${new Date().toLocaleDateString()}`, { align: "center" });
    
    const chunks = [];
    doc.on("data", (chunk) => chunks.push(chunk));
    doc.on("end", () => resolve(Buffer.concat(chunks)));
    doc.end();
  });
}

module.exports = {
  generateCertificate,
};


================================================
FILE: utils/ipfs.js
================================================
const axios = require("axios");
const fs = require("fs");
const FormData = require("form-data");
require("dotenv").config();

const PINATA_API_KEY = process.env.PINATA_API_KEY;
const PINATA_SECRET_API_KEY = process.env.PINATA_SECRET_API_KEY;

async function uploadToIPFS(fileBuffer) {
  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;
  
  let data = new FormData();
  data.append("file", fileBuffer, "certificate.pdf");
  
  const response = await axios.post(url, data, {
    maxContentLength: "Infinity",
    headers: {
      "Content-Type": `multipart/form-data; boundary=${data._boundary}`,
      pinata_api_key: PINATA_API_KEY,
      pinata_secret_api_key: PINATA_SECRET_API_KEY,
    },
  });
  
  return response.data.IpfsHash;
}

async function getFromIPFS(ipfsHash) {
  const url = `https://gateway.pinata.cloud/ipfs/${ipfsHash}`;
  const response = await axios.get(url, { responseType: "arraybuffer" });
  return response.data;
}

module.exports = {
  uploadToIPFS,
  getFromIPFS,
};


================================================
FILE: utils/qrGenerator.js
================================================
const QRCode = require("qrcode");
const fs = require("fs");

async function generateQRCode(data) {
  try {
    const qrCodePath = `./qrcodes/${Date.now()}.png`;
    await QRCode.toFile(qrCodePath, data);
    return qrCodePath;
  } catch (err) {
    console.error("Error generating QR code:", err);
    throw err;
  }
}

module.exports = {
  generateQRCode,
};

